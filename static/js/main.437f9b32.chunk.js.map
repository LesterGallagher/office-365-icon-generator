{"version":3,"sources":["components/App/logo.svg","components/Loader/Loader.module.css","components/Loader/Loader.js","config.js","flux-stores/GooglePlayStore.js","components/AppliedRoute/AppliedRoute.js","components/AsyncComponent/AsyncComponent.js","components/Routes/Routes.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","pageLoader","loader","Loader","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Object","assign","this","props","className","styles","cx","cy","r","Component","apiUrl","GooglePlayStore","searchResults","doApplicationSearch","_callee","term","lang","query","response","regenerator_default","wrap","_context","prev","next","queryString","stringify","num","fetch","concat","sent","json","_this","emit","type","stop","fetchTopApps","_callee2","_context2","topApps","EventEmitter","__webpack_exports__","AppliedRoute","_ref","C","component","cProps","rest","objectWithoutProperties","react_default","react_router","render","asyncComponent","importComponent","loadingComponent","arguments","length","undefined","_Component","AsyncComponent","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","mark","default","setState","apply","Home","Promise","all","e","then","bind","AppIconGenerator","Routes","childProps","console","log","react_router_dom","exact","path","App","isAuthenticated","userHasAuthenticated","user","src","logo","alt","href","target","rel","react_onsenui","components_Routes_Routes","Boolean","window","location","hostname","match","ons","platform","select","ReactDOM","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.437f9b32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageLoader\":\"Loader_pageLoader__2sPAI\",\"loader\":\"Loader_loader__2k4O4\"};","import React, { Component } from 'react';\r\nimport styles from './Loader.module.css';\r\n\r\nclass Loader extends Component {\r\n    render() {\r\n        return (\r\n            <svg {...this.props} className={styles.pageLoader}>\r\n                <circle cx=\"75\" cy=\"75\" r=\"20\"></circle>\r\n                <circle cx=\"75\" cy=\"75\" r=\"35\"></circle>\r\n                <circle cx=\"75\" cy=\"75\" r=\"50\"></circle>\r\n                <circle cx=\"75\" cy=\"75\" r=\"65\"></circle>\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loader;\r\n","export const apiUrl = 'http://localhost:3210/api/google-play-store';","import { EventEmitter } from \"events\";\r\nimport queryString from 'query-string';\r\nimport { apiUrl } from '../config';\r\n\r\nclass GooglePlayStore extends EventEmitter {\r\n\r\n    searchResults = [];\r\n\r\n    doApplicationSearch = async (term, lang) => {\r\n        const num = 5;\r\n        const query = queryString.stringify({ term, lang, num });\r\n        // https://www.npmjs.com/package/google-play-scraper#search\r\n        const response = await fetch(`${apiUrl}/search?${query}`);\r\n        this.searchResults = await response.json();\r\n        this.emit('change', { type: 'APP_SEARCH_FULFILLED' });\r\n    } \r\n\r\n    fetchTopApps = async () => {\r\n        const num = 100;\r\n        const query = queryString.stringify({ num });\r\n        // https://www.npmjs.com/package/google-play-scraper#search\r\n        const response = await fetch(`${apiUrl}/list?${query}`);\r\n        this.topApps = await response.json();\r\n        this.emit('change', { type: 'FETCH_TOP_APPS_FULFILLED' });\r\n    }\r\n}\r\n\r\nexport default new GooglePlayStore();\r\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nexport default ({ component: C, props: cProps, ...rest }) =>\n  <Route {...rest} render={props => <C {...props} {...cProps} />} />;","// https://serverless-stack.com/chapters/code-splitting-in-create-react-app.html\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nexport default function asyncComponent(importComponent, loadingComponent = null) {\r\n  class AsyncComponent extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        component: loadingComponent\r\n      };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      const { default: component } = await importComponent();\r\n\r\n      this.setState({\r\n        component: component\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const C = this.state.component;\r\n\r\n      return C ? <C {...this.props} /> : null;\r\n    }\r\n  }\r\n\r\n  return AsyncComponent;\r\n}","import React, { Component } from 'react';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport './Routes.css';\n\nimport Loader from '../Loader/Loader';\nimport AppliedRoute from \"../AppliedRoute/AppliedRoute\";\nimport UnauthenticatedRoute from '../UnauthenticatedRoute/UnauthenticatedRoute';\nimport AuthenticatedRoute from '../AuthenticatedRoute/AuthenticatedRoute';\nimport asyncComponent from '../AsyncComponent/AsyncComponent';\n\nconst Home = asyncComponent(() => import('../Home/Home'));\nconst AppIconGenerator = asyncComponent(() => import('../AppIconGenerator/AppIconGenerator'));\n\nclass Routes extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n        };\n\n    }\n\n    componentWillMount() {\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n        const { childProps } = this.props;\n        console.log(childProps);\n        return (\n            <HashRouter>\n                <Switch>\n                    {/* <UnauthenticatedRoute exact path=\"/login\" component={Introduction} props={childProps} /> */}\n                    {/* <UnauthenticatedRoute exact path=\"/no-entry\" component={NoEntry} props={childProps} /> */}\n\n                    {/* <AuthenticatedRoute exact path=\"/\" component={Home} props={childProps} /> */}\n                    {/* <AuthenticatedRoute exact path=\"/new-route\" component={NewRouteOrder} props={childProps} /> */}\n\n                    <AppliedRoute exact path=\"/\" component={Home} />\n                    <AppliedRoute exact path=\"/icon-generator\" component={AppIconGenerator} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default Routes;\n","import React, { Component } from 'react';\nimport { Button } from 'react-onsenui';\nimport logo from './logo.svg';\nimport './App.css';\nimport Routes from '../Routes/Routes';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAuthenticated: false,\n      userHasAuthenticated: true,\n      user: null\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <Button>Test</Button>\n        </header>\n        <Routes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ons from 'onsenui';\nimport './index.css';\nimport 'onsenui/css/onsenui.css';\nimport './onsen-css-theme/onsen-css-components.css'\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport GooglePlayStore from './flux-stores/GooglePlayStore';\n\nons.platform.select('android');\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}